apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "magda.opensearch.data.fullname" . }}"
  labels:
    component: opensearch
    role: data
spec:
  serviceName: "{{ template "magda.opensearch.data.fullname" . }}-headless"
{{- if not .Values.data.autoscaling.hpa.enabled }}
  replicas: {{ .Values.data.replicas | default 1 }}
{{- end }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  selector:
    matchLabels:
      component: opensearch
      role: data
  template:
    metadata:
      name: "{{ template "magda.opensearch.data.fullname" . }}"
      labels:
        component: opensearch
        role: data
      annotations:
        {{- range $key, $value := .Values.data.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- /* This forces a restart if the configmap has changed */}}
        {{- if .Values.config }}
        configchecksum: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum | trunc 63 }}
        {{- end }}
    spec:
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.data.terminationGracePeriod }}
      securityContext:
{{ toYaml .Values.podSecurityContext | indent 8 }}
        {{- if .Values.sysctl.enabled }}
        sysctls:
        - name: vm.max_map_count
          value: {{ .Values.data.sysctlVmMaxMapCount | default .Values.sysctlVmMaxMapCount | quote }}
        {{- end }}
        {{- if .Values.fsGroup }}
        fsGroup: {{ .Values.fsGroup }} # Deprecated value, please use .Values.podSecurityContext.fsGroup
        {{- end }}
      {{- if and .Values.data.rbac.create (eq .Values.data.rbac.serviceAccountName "") }}
      serviceAccountName: "{{ template "magda.opensearch.data.fullname" . }}"
      automountServiceAccountToken: {{ ne .Values.data.rbac.automountServiceAccountToken false }}
      {{- else if and .Values.data.rbac.create (ne .Values.data.rbac.serviceAccountName "") }}
      serviceAccountName: {{ .Values.data.rbac.serviceAccountName | quote }}
      automountServiceAccountToken: {{ ne .Values.data.rbac.automountServiceAccountToken false }}
      {{- else }}
      automountServiceAccountToken: {{ ne .Values.data.rbac.automountServiceAccountToken false }}
      {{- end }}
      {{- with .Values.data.tolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
      {{- end }}
      {{- with .Values.data.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- if and .Values.data.priorityClassName .Values.global.enablePriorityClass }}
      priorityClassName: {{ .Values.data.priorityClassName }}
      {{- end }}
      enableServiceLinks: {{ .Values.enableServiceLinks }}
      {{- if .Values.hostAliases }}
      hostAliases: {{ toYaml .Values.hostAliases | nindent 8 }}
      {{- end }}
      {{- include "magda.imagePullSecrets" . | indent 6 }}
      initContainers:
{{- if .Values.data.persistence.enableInitChown }}
      - name: fsgroup-volume
        image: {{ include "magda.image" (dict "image" .Values.initContainerImage) | quote }}
        imagePullPolicy: {{ include "magda.imagePullPolicy" (dict "image" .Values.initContainerImage) | quote }}
        command: ['sh', '-c']
        args:
          - 'chown -R 1000:1000 /usr/share/opensearch/data'
        securityContext:
          runAsUser: 0
        resources:
          {{- toYaml .Values.initResources | nindent 10 }}
        volumeMounts:
          - name: "{{ template "magda.opensearch.data.fullname" . }}"
            mountPath: {{ .Values.opensearchHome }}/data
{{- end }}
{{- if .Values.sysctlInit.enabled }}
      - name: sysctl
        image: {{ include "magda.image" (dict "image" .Values.initContainerImage) | quote }}
        imagePullPolicy: {{ include "magda.imagePullPolicy" (dict "image" .Values.initContainerImage) | quote }}
        command:
        - sh
        - -c
        - |
          set -xe
          DESIRED="{{ .Values.sysctlVmMaxMapCount }}"
          CURRENT=$(sysctl -n vm.max_map_count)
          if [ "$DESIRED" -gt "$CURRENT" ]; then
            sysctl -w vm.max_map_count=$DESIRED
          fi
        securityContext:
          runAsUser: 0
          privileged: true
        resources:
          {{- toYaml .Values.initResources | nindent 10 }}
{{- end }}
{{- if .Values.config }}
      - name: configfile
        image: {{ include "magda.image" . | quote }}
        imagePullPolicy: {{ include "magda.imagePullPolicy" . | quote }}
        command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash
          cp -r /tmp/configfolder/*  /tmp/config/
        resources:
          {{- toYaml .Values.initResources | nindent 10 }}
        volumeMounts:
          - mountPath: /tmp/config/
            name: config-emptydir
        {{- range $path, $config := .Values.config }}
          - name: config
            mountPath: /tmp/configfolder/{{ $path }}
            subPath: {{ $path }}
        {{- end -}}
{{- end }}
{{- if .Values.keystore }}
      - name: keystore
        image: {{ include "magda.image" . | quote }}
        imagePullPolicy: {{ include "magda.imagePullPolicy" . | quote }}
        command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash
          set -euo pipefail

          {{ .Values.opensearchHome }}/bin/opensearch-keystore create

          for i in /tmp/keystoreSecrets/*/*; do
            [ -f "$i" ] || continue
            key=$(basename $i)
            echo "Adding file $i to keystore key $key"
            {{ .Values.opensearchHome }}/bin/opensearch-keystore add-file "$key" "$i"
          done

          # Add the bootstrap password since otherwise the opensearch entrypoint tries to do this on startup
          if [ ! -z ${PASSWORD+x} ]; then
            echo 'Adding env $PASSWORD to keystore as key bootstrap.password'
            echo "$PASSWORD" | {{ .Values.opensearchHome }}/bin/opensearch-keystore add -x bootstrap.password
          fi

          cp -a {{ .Values.opensearchHome }}/config/opensearch.keystore /tmp/keystore/
        env: {{ toYaml .Values.extraEnvs | nindent 10 }}
        envFrom: {{ toYaml .Values.envFrom | nindent 10 }}
        resources:
          {{- toYaml .Values.initResources | nindent 10 }}
        volumeMounts:
        - name: keystore
          mountPath: /tmp/keystore
        {{- range .Values.keystore }}
        - name: keystore-{{ .secretName }}
          mountPath: /tmp/keystoreSecrets/{{ .secretName }}
        {{- end }}
{{- end }}
      {{- if .Values.extraInitContainers }}
      # Currently some extra blocks accept strings
      # to continue with backwards compatibility this is being kept
      # whilst also allowing for yaml to be specified too.
      {{- if eq "string" (printf "%T" .Values.extraInitContainers) }}
{{ tpl .Values.extraInitContainers . | indent 6 }}
      {{- else }}
{{ toYaml .Values.extraInitContainers | indent 6 }}
      {{- end }}
      {{- end }}
      {{- end }}
      containers:
      - name: es-data
        securityContext:
          privileged: true
          capabilities:
            add:
              - IPC_LOCK
        image: {{ include "magda.image" . | quote }}
        imagePullPolicy: {{ include "magda.imagePullPolicy" . | quote }}
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 5
{{- if .Values.global.enableLivenessProbes }}
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 300
          periodSeconds: 60
{{- end }}
        resources:
{{ toYaml .Values.data.resources | indent 10 }}
        env:
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: "CLUSTER_NAME"
          value: "myesdb"
        - name: NODE_DATA
          value: "true"
        - name: NODE_MASTER
          value: {{ not .Values.production | quote }}
        - name: HTTP_ENABLE
          value: {{ not .Values.production | quote }}
        - name: NODE_INGEST
          value: {{ not .Values.production | quote }}
        - name: ES_JAVA_OPTS
          value: "-Xms{{ .Values.data.heapSize }} -Xmx{{ .Values.data.heapSize }}"
        - name: ES_PLUGINS_INSTALL
          value: {{ .Values.data.pluginsInstall | quote }}
        - name: NETWORK_HOST
          value: "0.0.0.0"
        - name: DISCOVERY_SERVICE
          value: elasticsearch-discovery
{{- if .Values.backup.googleApplicationCreds }}
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/var/{{ .Values.backup.googleApplicationCreds.secretName }}/{{ .Values.backup.googleApplicationCreds.fileName }}"
{{- end }}
{{- if not .Values.production }}
        - name: REPO
          value: /snapshots
{{- end }}
        ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: storage
          mountPath: /data
{{- if .Values.backup.googleApplicationCreds }}
        - name: google-account-credentials
          mountPath: "/var/{{ .Values.backup.googleApplicationCreds.secretName }}"
          readOnly: true
{{- end }}
      volumes:
      {{- if .Values.data.config }}
      - name: config
        configMap:
          name: {{ template "magda.opensearch.data.fullname" . }}-config
      - emptyDir: {}
        name: config-emptydir
      {{- end }}
{{- if .Values.keystore }}
      - name: keystore
        emptyDir: {}
      {{- range .Values.keystore }}
      - name: keystore-{{ .secretName }}
        secret: {{ toYaml . | nindent 12 }}
      {{- end }}
{{ end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ include "magda.opensearch.data.fullname" . }}
    spec:
      accessModes:
      {{- range .Values.data.persistence.accessModes }}
      - {{ . | quote }}
      {{- end }}
      {{- if eq (typeOf .Values.data.persistence.storageClass) "<nil>" | not }}
      storageClassName: {{ .Values.data.persistence.storageClass | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.data.persistence.size | quote }}
